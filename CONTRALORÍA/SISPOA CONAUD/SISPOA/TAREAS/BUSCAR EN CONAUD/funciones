  async findAuditoriasInformesV2(query: GetAllAuditoriasInformesDto, manager: EntityManager) {
    try {
      const resultQueryNuevo = await this.findAllConaudNuevo(query, manager);
      if (resultQueryNuevo.length > 0) {
        console.log('#########################################')
        const resultQueryAntiguo = await this.findAllConaudAntiguo(query, manager);
        console.log("🐱==vv1==> ~ resultQueryAntiguo:", resultQueryAntiguo)
        const resultQuery = resultQueryAntiguo.length > 0
        ? await this.fylterNuevosEnAntiguos(resultQueryNuevo, resultQueryAntiguo)
        : resultQueryNuevo;
        console.log("🐱==vv2==> ~ resultQuery:", resultQuery)
        return CustomService.verifyingDataResult(resultQuery, this.message_custom);
      } else {
        const resultQueryAntiguo = await this.findAllConaudAntiguo(query, manager);
        return CustomService.verifyingDataResult(resultQueryAntiguo, this.message_custom);
      }
    } catch (error) {
      this.logger.debug(error);
      throwError(400, error.message);
    }
  }

  @LoggerMethod
  async findAllConaudNuevo(query: GetAllAuditoriasInformesDto, manager: EntityManager) {
    let resultQuery: any = [];
    try {
      let sql = `
        SELECT 	DISTINCT
		            ia.iac_codigo,
    	          ia.iac_codigo_control AS trabajo_codigo,
                ac.conaud_detalle->>'entidad_descripcion' AS entidad_descripcion,
    	          ia.iac_objeto AS auditoria_objeto,
    	          ia.iac_objetivo AS auditoria_objetivo,
    	          g.ges_anio AS actividad_gestion
        FROM 	  ejecucion_actividades.inicios_actividades ia
		            LEFT JOIN estructura_poa.actividades_continuidad ac ON ia.iac_codigo = ac.iac_codigo
                LEFT JOIN parametricas.gestiones g ON ia.ges_codigo = g.ges_codigo
        WHERE 	ia.iac_estado NOT IN (0)
                AND ia.iac_codigo_control LIKE '%${query.auditoria_codigo}'
        ;
      `;
      console.log("🐱==jj1==> ~ sql:", sql)
      resultQuery = await manager.query(sql);
      console.log("🐱==jj2==> ~ resultQuery:", resultQuery)
      resultQuery = await this.addDatosFaltantes(resultQuery, manager);
      console.log("🐱==jj3==> ~ resultQuery:", resultQuery)

    } catch (error) { }
    return resultQuery;
  }

  @LoggerMethod
  async addDatosFaltantes(arrayDatos: any, manager: EntityManager) {
    for (const item of arrayDatos) {
      let trabajoCodigoF = await this.convertirCodControl(item.trabajo_codigo, manager);
      item.trabajo_codigo_f = trabajoCodigoF ? trabajoCodigoF : '';
      let entidad = await this.findEntidad(item.trabajo_codigo, manager);
      item.entidad_descripcion = entidad ? entidad : '';
    }
    return arrayDatos;
  }

  @LoggerMethod
  async convertirCodControl(iacCodigoControl: any, manager: EntityManager) {
    try {
      // Divide la cadena en tres partes usando una expresión regular
      const match = iacCodigoControl.match(/^(.{2})(.{2,})(.{3})$/);

      if (match) {
        const [_, part1, part2, part3] = match;
        return `${part1}/${part2}/${part3}`;
      } else {
        // Si la cadena no cumple con el patrón esperado, devuélvela sin cambios
        return iacCodigoControl;
      }
    } catch (error) {
      return iacCodigoControl;
    }
  }

  @LoggerMethod
  async findEntidad(iacCodigoControl: any, manager: EntityManager) {
    let entidad: string = '';
    try {
      let sql = `
        SELECT  DISTINCT
                ac.conaud_detalle->>'entidad_descripcion' AS entidad_descripcion
        FROM    ejecucion_actividades.inicios_actividades ia
                LEFT JOIN estructura_poa.actividades_continuidad ac ON ia.iac_codigo = ac.iac_codigo
        WHERE 	ia.iac_codigo_control LIKE '${iacCodigoControl}'
                AND ac.conaud_detalle->>'trabajo_codigo' = ia.iac_codigo_control;
        ;
      `;
      entidad = (await manager.query(sql))[0].entidad_descripcion;
    } catch (error) { }
    return entidad;
  }

  @LoggerMethod
  async findAllConaudAntiguo(query: GetAllAuditoriasInformesDto, manager: EntityManager) {
    let resultQuery: any = [];
    try {
      resultQuery = await this.conaudProvider.findAuditorias(query);
    } catch (error) { }
    return resultQuery;
  }

  @LoggerMethod
  async fylterNuevosEnAntiguos(conNuevo: any, conAntiguo: any) {
    try {
      // Extraer los trabajo_codigo de conNuevo en un Set para rápida verificación
      const trabCodNuevo = new Set(conNuevo.map(obj => obj.trabajo_codigo));

      // Filtrar los objetos de conAntiguo cuyo trabajo_codigo no esté en conNuevo
      const objetosParaAgregar = conAntiguo.filter(
        obj => !trabCodNuevo.has(obj.trabajo_codigo)
      );
      // Añadir los objetos faltantes a conNuevo
      conNuevo.push(...objetosParaAgregar);
      return conNuevo;
>>>>>>> Stashed changes
    } catch (error) {
      throwError(400, error.message);
    }
  }
