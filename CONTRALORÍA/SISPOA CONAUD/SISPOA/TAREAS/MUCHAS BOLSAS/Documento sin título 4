  @LoggerMethod
  async findAllActividadesHoras(query: GetAllCalculoHorasDto, manager: EntityManager) {
    try {
      const getAllActividadesMovimientosHorasDto = new GetAllActividadesMovimientosHorasDto();
      getAllActividadesMovimientosHorasDto.act_codigo_adicion = query.act_codigo;
      getAllActividadesMovimientosHorasDto.amh_estado = `(${EstadoPoa.EDICION}, ${EstadoPoa.INACTIVO}, ${EstadoPoa.CONSOLIDADO})`;
      let resultQuery = await this.findAll(getAllActividadesMovimientosHorasDto, manager);
      console.log("🐱==mm0==> ~ resultQuery:", resultQuery)
      console.log("🐱==mm1==>  ActividadesMovimientosHorasService  resultQuery:", resultQuery)
      for (const item of resultQuery) {
        console.log("🐱==mm2==>  ActividadesMovimientosHorasService  item:", item)
        let detalle = structuredClone(item.amh_detalle)
        item.act_codigo = detalle.act_codigo;
        item.act_descripcion = detalle.act_descripcion;
        item.act_numero = detalle.act_numero;
        item.aun_sigla = detalle.aun_sigla;
        item.horas_planificadas = detalle.horas_planificadas;
        item.horas_comision = detalle.horas_comision;
        item.horas_calculo_movimiento = detalle.horas_calculo_movimiento;
        item.horas_disponibles = detalle.horas_disponibles;
      }
      return CustomService.verifyingDataResult(resultQuery, this.message_custom);
    } catch (error) {
      throwError(400, error.message);
    }
  }
